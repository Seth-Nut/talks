---
title: "From Data to Narrative"
subtitle: "Interactive Storytelling with Shiny"
author: 
  - Francisco Alfaro
date: 09 Apr 2025
format: 
  revealjs:
    transition: slide
    title-slide-attributes: 
      data-background-image: images/background.jpg
    logo: images/shiny_2025.png
filters:
  - quarto-ext/shinylive
---

## Agenda {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column .incremental width="30%"}
-   

-   No

-   Nope

-   Jamás
:::

::: {.column .fragment width="70%"}
<img src="images/neg.png" alt="Tachado" style="width: 50%; height: auto;"/>
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Regla de Storytelling #1

Nunca reveles el final antes de tiempo.\
[Siempre eleva la tensión y el dramatismo]{.fragment}
:::
:::

------------------------------------------------------------------------

## Agenda (v2) {background-image="images/background.jpg" background-opacity="0.25"}

::: incremental
1.  Nunca reveles el [final]{style="background-color:black;"}
2.  Los detalles son importantes, pero [no **todos** los detalles son importantes.]{style="background-color:black;"}
3.  Tu primera versión será [horrible.]{style="background-color:black;"}
4.  Muestra, no [cuentes.]{style="background-color:black;"}
:::

------------------------------------------------------------------------

##  {background-image="images/background_slides3.png" background-opacity="0.3"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
[Data Storytelling]{style="font-size: 1em"}

[¿Por qué Data Storytelling?]{style="font-size: 1.5em"}
:::

------------------------------------------------------------------------

## ¿Qué es el Storytelling? {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
![](images/cave.jpg){fig-align="center" width="90%"}
:::

::: {.column .fragment width="50%"}
![](images/fire.jpg){fig-align="center" width="100%"}
:::
:::

. . .

::: {style="text-align: center; "}
🔥 Las **historias** son la primera tecnología humana
:::

------------------------------------------------------------------------

## Esos cerebros tan hackables... {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
![](images/storytelling/sketplanation.png){fig-align="center" width="90%"}\
*Regla del máximo y final (Peak-End Rule)*
:::

::: {.column .fragment width="50%"}
![](images/storytelling/got.jpg){fig-align="center" width="100%"}\
*Rating de Game of Thrones, por Kelvin Neo*
:::
:::

------------------------------------------------------------------------

## Narrativa {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br><br> Usar **trucos** de Storytelling (narrativa) para crear presentaciones que serán **recordadas** y que causarán **impacto**
:::

::: {.column .fragment width="40%"}
![](images/emotions.png){fig-align="center"}
:::
:::

. . .

::: {style="text-align: center;"}
🎭 Las **emociones** generan acciones
:::

------------------------------------------------------------------------

## El mejor ejemplo {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column .fragment width="30%" fragment-index="1"}
![](images/storytelling/spotify1.jpeg){fig-align="center"}
:::

::: {.column .center width="40%"}
<br><br> ¿Podemos hacer que millones de personas compartan estadísticas en redes sociales?
:::

::: {.column .fragment width="30%" fragment-index="1"}
![](images/storytelling/spotify2.jpeg){fig-align="center"}
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Regla de Storytelling #2

Los detalles son importantes, [pero no **todos** los detalles son importantes.]{.fragment}
:::
:::

------------------------------------------------------------------------

## Ejemplos {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
![](images/dst_before.png){fig-align="center"} *🔢 No compartas números*
:::

::: {.column .fragment width="50%"}
![](images/dst_after.png){fig-align="center"} *🪶Comparte una historia*
:::
:::

. . .

<br><br> [(C) Storytelling with Data, por Cole Nussbaumer Knaflic.]{style="font-size: 0.75em; color: gray"}

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Regla de Storytelling #3

Tu primera versión **siempre** será horrible.
:::
:::

------------------------------------------------------------------------

## Ejemplos {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
![](images/gh_before.png){fig-align="center"}
:::

::: {.column .fragment width="50%"}
![](images/gh_after.png){fig-align="center"}
:::
:::

. . .

::: {style="text-align: center;"}
🥱 1° versión $<$ ... $<$ 😊 última versión
:::

------------------------------------------------------------------------

## Usar chatbots de IA para: {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="65%"}
<br>

-   Plantillas personalizadas a medida
-   Automatizar estructura del contenido
-   Ahorro de tiempo en diseño
-   Adaptación al estilo y preferencias
:::

::: {.column .fragment width="35%"}
![](images/ai/template.png){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## 💡 Chatbots A.I. - Ideas {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

-   [ChatGPT (OpenAI)](https://openai.com/chatgpt/)
-   [Gemini (Google DeepMind)](https://deepmind.google/gemini/)
-   [Meta AI (Meta)](https://ai.meta.com/)
-   [DeepSeek (DeepSeek)](https://chat.deepseek.com/)
:::

::: {.column width="40%"}
<img src="images/ai/ai_ideas.png" alt="Asistentes Virtuales" style="width: 100%; border-radius: 10px;"/>
:::
:::

------------------------------------------------------------------------

## Usar chatbots de IA para: {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

-   Analogías y ejemplos
-   Mejores traducciones
-   Prompts para crear imágenes
-   No busques imágenes, créalas!
:::

::: {.column .fragment width="40%"}
![](images/ai/choice.jpeg){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## 💡 Chatbots A.I. - Imágenes {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

-   [Canva con Magic Studio](https://www.canva.com/magic/)
-   [Microsoft Designer](https://designer.microsoft.com/)
-   [Napkin AI](https://www.napkin.one/)
-   [Midjourney](https://www.midjourney.com/)
:::

::: {.column width="40%"}
<img src="images/ai/ai_images.png" alt="Asistentes Virtuales" style="width: 100%; border-radius: 10px;"/>
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Regla de Storytelling #4

[Explicar menos]{style="color: red"} y [mostrar más]{style="color: green"}
:::
:::

------------------------------------------------------------------------

## [Explicar menos]{style="color: red"} y [mostrar más]{style="color: green"} {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
<br>

``` python
import matplotlib.pyplot as plt

# Data
categories = ['Yes', 'No']
values = [75, 25]

# Create the bar chart
plt.figure(figsize=(10, 4))
plt.bar(categories, values, color=['lightblue', 'salmon'])
plt.title('😊 Do you like the presentation so far? 😊')

# Display the plot
plt.show()
```
:::

::: {.column .fragment width="50%"}
<br>

```{python}
import matplotlib.pyplot as plt

# Data
categories = ['Yes', 'No']
values = [75, 25]

# Create the bar chart
plt.figure(figsize=(10, 4))
plt.bar(categories, values, color=['lightblue', 'salmon'])
plt.title('😊 Do you like the presentation so far? 😊')

# Display the plot
plt.show()
```
:::
:::

------------------------------------------------------------------------

## Quarto {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

[Quarto](https://quarto.org/) es un sistema abierto para publicaciones científicas con markdown y código interactivo (Python/R).
:::

::: {.column width="40%"}
![](images/quarto/quarto2.png)
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="40%"}
[Código: example.qmd]{style="font-size: 0.5em; color: gray"}

```         
---
title: "Habits"
author: "John Doe"
format:
  revealjs:
    transition: fade
    theme: black
    toc: true
    center: true
---

## Getting up

- Turn off alarm
- Get out of bed

---

## Going to sleep 
::: { .incremental }

- Get in bed
- Count sheep

:::
```
:::

::: {.column width="60%"}
[Slides: example.html]{style="font-size: 0.5em; color: gray"}

```{=html}
<iframe width=600 height=400 src="images/quarto/quarto_min.html"></iframe>
```
:::
:::

------------------------------------------------------------------------

## Ejemplos {background-image="images/background.jpg" background-opacity="0.25"}

::: panel-tabset
## Code

``` python
import matplotlib.pyplot as plt

# Data
categories = ['Yes', 'No']
values = [75, 25]

# Create the bar chart
plt.figure(figsize=(10, 4))
plt.bar(categories, values, color=['lightblue', 'salmon'])
plt.title('😊 Do you like the presentation so far? 😊')

# Display the plot
plt.show()
```

## Plot

```{python}
import matplotlib.pyplot as plt

# Data
categories = ['Yes', 'No']
values = [75, 25]

# Create the bar chart
plt.figure(figsize=(10, 4))
plt.bar(categories, values, color=['lightblue', 'salmon'])
plt.title('😊 Do you like the presentation so far? 😊')

# Display the plot
plt.show()
```
:::

------------------------------------------------------------------------

## Quarto Extensiones {background-image="images/background.jpg" background-opacity="0.25"}

<br>

Las [extensiones](https://quarto.org/docs/extensions/) son una herramienta poderosa para modificar y ampliar el comportamiento de Quarto.

::: {style="text-align: center;"}
<img src="images/quarto/quarto-extensions.png" alt="Tachado" style="width: 70%; border-radius: 10px;"/>
:::

------------------------------------------------------------------------

## 🌐 Quarto WebR y Quarto Pyodide {background-image="images/background.jpg" background-opacity="0.25"}

<br>

1.  [WebR](https://docs.r-wasm.org/webr/latest/): Ejecuta código R en el navegador, sin instalaciones.

    ``` bash
    # Para instalar WebR en tu entorno
    remotes::install_github("attiyap/WebR")
    ```

2.  [Pyodide](https://quarto.thecoatlessprofessor.com/pyodide/) : Idem pero para Python.

    ``` bash
    # Para instalar Pyodide
    pip install pyodide
    ```

::: {style="text-align: center;"}
<img src="images/quarto/webr-demo.png" alt="Tachado" style="width: 100%; border-radius: 10px;"/>
:::

------------------------------------------------------------------------

## Ejemplos {background-image="images/background.jpg" background-opacity="0.25"}

::: panel-tabset
## WebR

```{webr-r}
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
par(mfrow = c(2, 1), mar = c(1, 1, 1, 1),  oma = c(1, 10, 1, 1)   )
plot(x, y, type="o", col="blue", pch=16, lwd=2, xlab="", ylab="", main="Gráfico en R")
```

## Pyodide

```{pyodide-python}
import matplotlib.pyplot as plt
x = [1, 2, 3, 4, 5]
y = [2, 4, 6, 8, 10]
plt.figure(figsize=(6, 3)) 
plt.plot(x, y, marker='o', color='blue')
plt.title("Gráfico Sencillo en Python")
plt.show()
```
:::

------------------------------------------------------------------------

## Shiny {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br><br>

Shiny es un paquete de R que permite crear aplicaciones web interactivas fácilmente usando R (También disponible para python).
:::

::: {.column width="40%"}
![](images/quarto/shiny.png)
:::
:::

------------------------------------------------------------------------

## Shiny {background-image="images/background.jpg" background-opacity="0.25"}

![](https://shiny.posit.co/r/articles/improve/debugging/kmeans-showcase.gif){width="80%"}

------------------------------------------------------------------------

## 🌐 Quarto Shinylive {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

Código para desplegar aplicaciones **Shiny** que se ejecutarán completamente en el navegador, utilizando **Pyodide** y **webR** (Python y R compilados a WebAssembly).
:::

::: {.column width="40%"}
![](images/quarto/shinylive.png)
:::
:::

> **R:** [Ejemplos de Shinylive en R](https://shinylive.io/r/examples/)\
> **Python:** [Ejemplos de Shinylive en Python](https://shinylive.io/py/examples/)

------------------------------------------------------------------------

## Quarto & Shiny {background-image="images/background.jpg" background-opacity="0.25"}

```{shinylive-python}
#| standalone: true
#| viewerHeight: 550

from shiny import App, ui, render, reactive
import matplotlib.pyplot as plt
import io
import base64

# Function to generate the plot dynamically based on input values
def create_plot(yes_value, no_value):
    categories = ['Yes', 'No']
    values = [yes_value, no_value]

    fig, ax = plt.subplots(figsize=(10, 3))
    ax.bar(categories, values, color=['lightblue', 'salmon'])
    ax.set_title('😊 Do you like the presentation so far? 😊')

    # Convert the image to base64 for display in Shiny
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    encoded_image = base64.b64encode(buf.getvalue()).decode()
    return f'<img src="data:image/png;base64,{encoded_image}" style="max-width:100%;">'

# UI definition
app_ui = ui.page_fluid(
    ui.h2("Interactive Survey"),
    
    # Sliders to change values dynamically
    ui.input_slider("yes_value", "Yes responses:", min=0, max=50, value=20),
    ui.input_slider("no_value", "No responses:", min=0, max=50, value=10),
    
    # Output area for the plot
    ui.output_ui("plot_output")
)

# Server function
def server(input, output, session):
    @output
    @render.ui
    def plot_output():
        return ui.HTML(create_plot(input.yes_value(), input.no_value()))

# Create the Shiny app
app = App(app_ui, server)

```

------------------------------------------------------------------------

## Agenda (v2) {background-image="images/background.jpg" background-opacity="0.25"}

::: incremental
1.  Nunca reveles el [**final**]{.fragment style="color:grey;"}
2.  Los detalles son importantes, pero [no **todos** los detalles son importantes]{.fragment style="color:grey;"}
3.  Tu primera versión será [**horrible**]{.fragment style="color:grey;"}
4.  Muestra, no [**cuentes**]{.fragment style="color:grey;"}
:::

::: notes
Opción 2: Una agenda misteriosa.
:::

------------------------------------------------------------------------

## 🎉 ¡Gracias por Participar! {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
<br>

❓¿Preguntas?

👏 Responder [encuesta](https://docs.google.com/forms/d/e/1FAIpQLScdkSSY40VsN_uEXsNK5LYP-qngUVvaO-c8qItr163zzvpzZA/viewform?usp=sf_link)

🥳 Gracias de Nuevo
:::

::: {.column width="50%" align="center"}
![](images/qr_visualizacion.png){width="400"}
:::
:::

> 🔗 Nuestro Sitio Web: [sethnut.com/talks](https://sethnut.com/talks/).

```{=html}
<style>
/* Ajusta el tamaño del título y subtítulo */
.reveal .slides h1 {
  font-size: 2em; /* Tamaño más pequeño para el título */
}

.reveal .slides h2 {
  font-size: 1.5em; /* Tamaño más pequeño para el subtítulo */
}

/* Ajusta el tamaño del texto en los párrafos */
.reveal .slides p {
  font-size: 0.8em; /* Texto más pequeño */
}

/* Ajusta el tamaño de las tablas */
.reveal .slides table {
  font-size: 0.8em; /* Tamaño de fuente más pequeño en las tablas */
  width: 90%; /* Ajusta el ancho de la tabla */
  margin: 0 auto; /* Centra la tabla */
}

/* Ajusta el tamaño de los bullets */
.reveal .slides ul {
  font-size: 0.8em; /* Tamaño de fuente más pequeño en los bullets */

}

.reveal .slide-logo {
   max-height: 1em !important;
}


</style>
```