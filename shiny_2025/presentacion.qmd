---
title: "From Data to Narrative"
subtitle: "Interactive Storytelling with Shiny"
author: 
  - Francisco Alfaro
date: 11 Apr 2025
format: 
  revealjs:
    transition: slide
    title-slide-attributes: 
      data-background-image: images/background.jpg
    logo: images/shiny_2025.png
filters:
  - quarto-ext/shinylive
---

## Agenda {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column .incremental width="30%"}
-   

* No
* Nope
* No chance
  
:::

::: {.column .fragment width="70%"}
<img src="images/neg.png" alt="Tachado" style="width: 50%; height: auto;"/>
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Lesson #1 of Storytelling

Never reveal the ending too soon.  
[Always build up tension and drama]{.fragment}
:::
:::

------------------------------------------------------------------------

## Agenda (v2) {background-image="images/background.jpg" background-opacity="0.25"}

::: incremental
1. Never reveal the [ending]{style="background-color:black;"}  
2. Details are important, but [not **all** details are important.]{style="background-color:black;"}  
3. Your first draft will be [horrible.]{style="background-color:black;"}  
4. Show, don't [tell.]{style="background-color:black;"}
:::

------------------------------------------------------------------------

##  {background-image="images/background_slides3.png" background-opacity="0.3"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
[Data Storytelling]{style="font-size: 1em"}  

[Why Data Storytelling?]{style="font-size: 1.5em"}
:::

------------------------------------------------------------------------

## What is Storytelling? {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="50%"}
![](images/cave.jpg){fig-align="center" width="90%"}
:::

::: {.column .fragment width="50%"}
![](images/fire.jpg){fig-align="center" width="100%"}
:::
:::

. . .

::: {style="text-align: center; "}
🔥 **Stories** are the first human technology.
:::

------------------------------------------------------------------------

## Ohh, those hackable brains {background-image="images/background.jpg" background-opacity="0.25"}

<br>

::: columns
::: {.column width="50%"}
![](images/storytelling/sketplanation.png){fig-align="center" width="90%"}\
*Peak-End Rule*
:::

::: {.column .fragment width="50%"}
![](images/storytelling/got.jpg){fig-align="center" width="100%"}\
*Game of Thrones Rating, by Kelvin Neo*
:::
:::

------------------------------------------------------------------------

## Narrative {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br><br> Use **Storytelling tricks** (narrative) to create presentations that will be **remembered** and make an **impact**  
:::

::: {.column .fragment width="40%"}
![](images/emotions.png){fig-align="center"}
:::
:::

. . .

::: {style="text-align: center;"}
🎭 Emotions inspire action
:::

------------------------------------------------------------------------

## The best example {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column .fragment width="30%" fragment-index="1"}
![](images/storytelling/spotify1.jpeg){fig-align="center"}
:::

::: {.column .center width="40%"}
<br><br> How to make millions of people share statistics on social media?
:::

::: {.column .fragment width="30%" fragment-index="1"}
![](images/storytelling/spotify2.jpeg){fig-align="center"}
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Storytelling principle #2

Details matter, [but not **all** details are important.]{.fragment}
:::
:::

------------------------------------------------------------------------

## Examples {background-image="images/background.jpg" background-opacity="0.25"}

::: columns  
::: {.column width="50%"}  
![](images/dst_before.png){fig-align="center"} *🔢 Don't share numbers*  
:::  

::: {.column .fragment width="50%"}  
![](images/dst_after.png){fig-align="center"} *🪶 Share a story*  
:::  
:::

. . .

<br><br> [(C) Storytelling with Data, by Cole Nussbaumer Knaflic.]{style="font-size: 0.75em; color: gray"}

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note

## Storytelling principle #2

Your first draft will **always** be horrible.
:::
:::

------------------------------------------------------------------------

## Examples {background-image="images/background.jpg" background-opacity="0.25"}

<br>

::: columns
::: {.column width="50%"}
![](images/gh_before.png){fig-align="center"}
:::

::: {.column .fragment width="50%"}
![](images/gh_after.png){fig-align="center"}
:::
:::

. . .

::: {style="text-align: center;"}
🥱 1° version $<$ ... $<$ 😊 last version
:::

------------------------------------------------------------------------

## Using AI Chatbots to: {background-image="images/background.jpg" background-opacity="0.25"}

::: columns  
::: {.column width="65%"}  
<br>  

-   Create customized templates  
-   Automate content structure  
-   Save time on design  
-   Adapt to style and preferences  
:::

::: {.column .fragment width="35%"}
![](images/ai/template.png){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## 💡 Chatbots A.I. - Ideas {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

-   [ChatGPT (OpenAI)](https://openai.com/chatgpt/)
-   [Gemini (Google DeepMind)](https://deepmind.google/gemini/)
-   [Meta AI (Meta)](https://ai.meta.com/)
-   [DeepSeek (DeepSeek)](https://chat.deepseek.com/)
:::

::: {.column width="40%"}
<img src="images/ai/ai_ideas.png" alt="Asistentes Virtuales" style="width: 100%; border-radius: 10px;"/>
:::
:::

------------------------------------------------------------------------

## Using AI Chatbots for: {background-image="images/background.jpg" background-opacity="0.25"}

::: columns  
::: {.column width="60%"}  
<br>  

-   Analogies and examples  
-   Better translations  
-   Prompts to create images  
-   Don't search for images, create them!  
:::

::: {.column .fragment width="40%"}
![](images/ai/choice.jpeg){fig-align="center"}
:::
:::

------------------------------------------------------------------------

## 💡 Chatbots A.I. - Images {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

-   [Canva + Magic Studio](https://www.canva.com/magic/)
-   [Microsoft Designer](https://designer.microsoft.com/)
-   [Napkin AI](https://www.napkin.one/)
-   [Midjourney](https://www.midjourney.com/)
:::

::: {.column width="40%"}
<img src="images/ai/ai_images.png" alt="Asistentes Virtuales" style="width: 100%; border-radius: 10px;"/>
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: {style="display: flex; justify-content: center; align-items: center; height: 60vh; flex-direction: column; text-align: center;"}
::: callout-note
## Storytelling principle #4

[Explain less]{style="color: red"}, [show more]{style="color: green"}
:::
:::

------------------------------------------------------------------------

## [Explain less]{style="color: red"}, [show more]{style="color: green"} {background-image="images/background.jpg" background-opacity="0.25"}

<br>

```r
categories <- c("Yes", "No")
values <- c(75, 25)
colors <- c("lightblue", "salmon")
barplot(
  values, names.arg = categories, col = colors, 
  main = "😊 Do you like the presentation so far? 😊", cex.main = 0.9)
```

. . . 


```{r}
categories <- c("Yes", "No")
values <- c(75, 25)
colors <- c("lightblue", "salmon")
par(mfrow = c(2, 1), mar = c(1, 2, 1, 1),  oma = c(1, 8, 1, 3)   )
barplot(values, names.arg = categories, col = colors, main = "😊 Do you like the presentation so far? 😊", cex.main = 0.9)
```


------------------------------------------------------------------------

## Quarto {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br><br>

[Quarto](https://quarto.org/) is an open system for scientific publications with markdown and interactive code (Python/R).
:::

::: {.column width="40%"}
![](images/quarto/quarto2.png)
:::
:::

------------------------------------------------------------------------

##  {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="40%"}
[Código: example.qmd]{style="font-size: 0.5em; color: gray"}

```         
---
title: "Habits"
author: "John Doe"
format:
  revealjs:
    transition: fade
    theme: black
    toc: true
    center: true
---

## Getting up

- Turn off alarm
- Get out of bed

---

## Going to sleep 
::: { .incremental }

- Get in bed
- Count sheep

:::
```
:::

::: {.column width="60%"}
[Slides: example.html]{style="font-size: 0.5em; color: gray"}

```{=html}
<iframe width=600 height=400 src="images/quarto/quarto_min.html"></iframe>
```
:::
:::

------------------------------------------------------------------------

## Examples {background-image="images/background.jpg" background-opacity="0.25"}

::: panel-tabset
## Code

```r
categories <- c("Yes", "No")
values <- c(75, 25)
colors <- c("lightblue", "salmon")
barplot(
  values, names.arg = categories, col = colors, 
  main = "😊 Do you like the presentation so far? 😊", cex.main = 0.9
)
```

## Plot

```{r}
categories <- c("Yes", "No")
values <- c(75, 25)
colors <- c("lightblue", "salmon")
barplot(values, names.arg = categories, col = colors, main = "😊 Do you like the presentation so far? 😊", cex.main = 0.9)
```
:::

------------------------------------------------------------------------

## Quarto Extensions {background-image="images/background.jpg" background-opacity="0.25"}

<br>

[Extensions](https://quarto.org/docs/extensions/) are a powerful tool to modify and extend the behavior of Quarto.

::: {style="text-align: center;"}
<img src="images/quarto/quarto-extensions.png" alt="Tachado" style="width: 70%; border-radius: 10px;"/>
:::

------------------------------------------------------------------------

## 🌐 Quarto WebR {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

1.  [WebR](https://docs.r-wasm.org/webr/latest/): Run R code in the browser, no installation required.

    ```bash
    # To install WebR in your environment
    remotes::install_github("attiyap/WebR")
    ```

2.  [Pyodide](https://quarto.thecoatlessprofessor.com/pyodide/): Same, but for Python.

    ```bash
    # To install Pyodide
    pip install pyodide
    ```
:::

::: {.column width="40%"}
![](images/quarto/webr.png)
:::
:::

------------------------------------------------------------------------

## Examples {background-image="images/background.jpg" background-opacity="0.25"}

::: panel-tabset
## WebR - ex1

```{webr-r}
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
par(mfrow = c(2, 1), mar = c(1, 1, 1, 1),  oma = c(1, 10, 1, 1)   )
plot(x, y, type="o", col="blue", pch=16, lwd=2, xlab="", ylab="", main="Simple Line Plot")
```

## WebR - ex2

```{webr-r}
categories <- c("Yes", "No")
values <- c(75, 25)
colors <- c("lightblue", "salmon")
par(mfrow = c(2, 1), mar = c(1, 2, 1, 1),  oma = c(1, 8, 1, 3)   )
barplot(values, names.arg = categories, col = colors, main = "😊 Do you like the presentation so far? 😊", cex.main = 0.9)
```

:::

------------------------------------------------------------------------

## Shiny {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br><br>

[Shiny](https://shiny.posit.co/) is an R package that allows you to easily create interactive web applications using R (also available for Python).
:::

::: {.column width="40%"}
![](images/quarto/shiny.png)
:::
:::

------------------------------------------------------------------------

## Shiny {background-image="images/background.jpg" background-opacity="0.25"}

<br>

![](https://shiny.posit.co/r/articles/improve/debugging/kmeans-showcase.gif){width="80%"}

------------------------------------------------------------------------

## 🌐 Quarto Shinylive {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%"}
<br>

Code to deploy **Shiny** applications that run entirely in the browser, using **Pyodide** and **webR** (Python and R compiled to WebAssembly).
:::

::: {.column width="40%"}
![](images/quarto/shinylive.png)
:::
:::

. . . 

> 🌐 [Shinylive in R](https://shinylive.io/r/examples/), 🐍 [Shinylive in Python](https://shinylive.io/py/examples/)

------------------------------------------------------------------------

## Quarto & Shiny {background-image="images/background.jpg" background-opacity="0.25"}

```{shinylive-python}
#| standalone: true
#| viewerHeight: 550

from shiny import App, ui, render, reactive
import matplotlib.pyplot as plt
import io
import base64

# Function to generate the plot dynamically based on input values
def create_plot(yes_value, no_value):
    categories = ['Yes', 'No']
    values = [yes_value, no_value]

    fig, ax = plt.subplots(figsize=(10, 3))
    ax.bar(categories, values, color=['lightblue', 'salmon'])
    ax.set_title('😊 Do you like the presentation so far? 😊')

    # Convert the image to base64 for display in Shiny
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    plt.close(fig)
    buf.seek(0)
    encoded_image = base64.b64encode(buf.getvalue()).decode()
    return f'<img src="data:image/png;base64,{encoded_image}" style="max-width:100%;">'

# UI definition
app_ui = ui.page_fluid(
    ui.h2("Interactive Survey"),
    
    # Sliders to change values dynamically
    ui.input_slider("yes_value", "Yes responses:", min=0, max=50, value=20),
    ui.input_slider("no_value", "No responses:", min=0, max=50, value=10),
    
    # Output area for the plot
    ui.output_ui("plot_output")
)

# Server function
def server(input, output, session):
    @output
    @render.ui
    def plot_output():
        return ui.HTML(create_plot(input.yes_value(), input.no_value()))

# Create the Shiny app
app = App(app_ui, server)

```

------------------------------------------------------------------------

## 🔗 Useful Links {background-image="images/background.jpg" background-opacity="0.25"}

::: columns
::: {.column width="60%" .incremental}

<br>

- 🎥 **YouTube Videos**: 
  - [Reproducible Data Science: WebR + Shinylive](https://www.youtube.com/watch?v=dummy_link)
  - [George Stagg | Posit](https://github.com/georgestagg) 


- 📖 **More about webR and Shinylive**: 
  - [WebR Documentation](https://docs.r-wasm.org/webr/v0.3.2/)
  - [Shinylive Documentation](https://quarto-ext.github.io/shinylive/)
  - [Shinylive Examples](https://shinylive.io/r/)


:::

::: {.column width="40%"}
<br>
![](images/quarto/rwasm.png)
:::
:::


------------------------------------------------------------------------


## Agenda (v2) {background-image="images/background.jpg" background-opacity="0.25"}

::: incremental
1. Never reveal the [**ending**]{.fragment style="color:grey;"}  
2. Details are important, but [not **all** details are important]{.fragment style="color:grey;"}  
3. Your first draft will be [**horrible**]{.fragment style="color:grey;"}  
4. Show, don't [**tell**]{.fragment style="color:grey;"}
:::

::: notes
Opción 2: Una agenda misteriosa.
:::

------------------------------------------------------------------------

## 🎉 Thank You for Participating! {background-image="images/background.jpg" background-opacity="0.25"}

::: columns  
::: {.column width="50%"}  
<br>  

❓ Questions?  

👏 Fill out the [survey](https://forms.gle/roKy9m8pfSANAkHJ8)  

🥳 Thank You Again!  
:::  

::: {.column width="50%" align="center"}  
![](images/qr_shinyconf.png){width="400"}  
:::  
:::  

> 🔗 Our Website: [seth-nut.github.io/resources](https://seth-nut.github.io/resources/).

```{=html}
<style>
/* Ajusta el tamaño del título y subtítulo */
.reveal .slides h1 {
  font-size: 2em; /* Tamaño más pequeño para el título */
}

.reveal .slides h2 {
  font-size: 1.5em; /* Tamaño más pequeño para el subtítulo */
}

/* Ajusta el tamaño del texto en los párrafos */
.reveal .slides p {
  font-size: 0.8em; /* Texto más pequeño */
}

/* Ajusta el tamaño de las tablas */
.reveal .slides table {
  font-size: 0.8em; /* Tamaño de fuente más pequeño en las tablas */
  width: 90%; /* Ajusta el ancho de la tabla */
  margin: 0 auto; /* Centra la tabla */
}

/* Ajusta el tamaño de los bullets */
.reveal .slides ul {
  font-size: 0.8em; /* Tamaño de fuente más pequeño en los bullets */

}

.reveal .slide-logo {
   max-height: 1em !important;
}


</style>
```